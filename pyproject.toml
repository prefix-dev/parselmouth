[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "parselmouth"
version = "0.0.1"
authors = [
  { name="Nichita Morcotilo", email="nichita@prefix.dev" },
]
description = "Mapper of conda to pypi"
readme = "README.md"
requires-python = "==3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

# These are pypi dependencies
dependencies = [
    # needs to be published
    "conda-oci-mirror @ git+https://github.com/channel-mirrors/conda-oci-mirror.git@25ea3e436f0b0bc5a9c646121efafc9c68e116cd",
    "conda-forge-metadata~=0.8.1",
]

[project.scripts]
parselmouth = "parselmouth.parselmouth:app"

[tool.pixi.project]
name = "parselmouth"
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
parselmouth = { path = ".", editable = true }
types-aioboto3 = "*"

[tool.pixi.dependencies]
requests = ">=2.31.0,<2.32"
boto3 = ">=1.34,<1.35"
boto3-stubs = ">=1.34,<1.35"
python-dotenv = ">=1.0.1,<1.1"
packaging = "*"
typer = ">=0.12.4,<0.13"
pydantic = ">=2.8.2,<3"
aioboto3 = ">=13.1.1,<14"
ruamel = ">=1.0,<2"

[tool.pixi.feature.test.dependencies]
pytest = "*"

[tool.pixi.feature.test.tasks]
test = "pytest tests"

[tool.pixi.feature.fmt.dependencies]
# Formatting python
ruff = ">=0.5.0,<0.6"
pre-commit = ">=3.7.1,<4"
pre-commit-hooks = ">=4.6.0,<5"
typos = ">=1.23.1,<2"
mypy = ">=1.10.1,<2"

[tool.pixi.feature.fmt.tasks]
# Format recipes using ruff
fmt = "ruff format"
check-fmt = "ruff check --fix"

pre-commit-install = "pre-commit-install"
pre-commit-run = "pre-commit run"
lint = "pre-commit run -a"

[tool.pixi.feature.type-checking.dependencies]
types-pyyaml = ">=6.0.12.20240311, <6.0.13"
types-requests = ">=2.31.0, <2.32"
types-Deprecated = ">=1.2.9.20240311, <1.3"
mypy = ">=1.10.1, <2"

[tool.pixi.feature.type-checking.tasks]
type-check = "mypy src"

[tool.pixi.environments]
test = {features = ["test"], solve-group = "default"}
fmt = {features = ["fmt"], solve-group = "default"}
type-checking = { features = ["type-checking"] }


[tool.pyright]
venv = "default"
pythonVersion = "3.12"
venvPath = ".pixi/envs"
exclude = [".pixi/**", ".pytest_cache/**", "**/__pycache__"]
